// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: api/in/v1/equipment.proto

package v1

import (
	context "context"
	vo "gamefi_equipment/api/in/v1/vo"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EquipmentService_AddEquipment_FullMethodName        = "/api.in.v1.EquipmentService/AddEquipment"
	EquipmentService_UpgradeEquipment_FullMethodName    = "/api.in.v1.EquipmentService/UpgradeEquipment"
	EquipmentService_AddFightEquipment_FullMethodName   = "/api.in.v1.EquipmentService/AddFightEquipment"
	EquipmentService_ClearFightEquipment_FullMethodName = "/api.in.v1.EquipmentService/ClearFightEquipment"
	EquipmentService_ListEquipment_FullMethodName       = "/api.in.v1.EquipmentService/ListEquipment"
	EquipmentService_ListHeroEquipment_FullMethodName   = "/api.in.v1.EquipmentService/ListHeroEquipment"
	EquipmentService_BatchHeroEquipment_FullMethodName  = "/api.in.v1.EquipmentService/BatchHeroEquipment"
	EquipmentService_BreakDownEquipment_FullMethodName  = "/api.in.v1.EquipmentService/BreakDownEquipment"
)

// EquipmentServiceClient is the client API for EquipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentServiceClient interface {
	// 添加装备(掉落装备)
	AddEquipment(ctx context.Context, in *vo.AddEquipmentRequest, opts ...grpc.CallOption) (*vo.AddEquipmentResponse, error)
	// 强化装备
	UpgradeEquipment(ctx context.Context, in *vo.UpgradeEquipmentRequest, opts ...grpc.CallOption) (*vo.UpgradeEquipmentResponse, error)
	// 穿装备
	AddFightEquipment(ctx context.Context, in *vo.AddFightEquipmentRequest, opts ...grpc.CallOption) (*vo.AddFightEquipmentResponse, error)
	// 脱装备
	ClearFightEquipment(ctx context.Context, in *vo.ClearFightEquipmentRequest, opts ...grpc.CallOption) (*vo.ClearFightEquipmentResponse, error)
	// 装备列表
	ListEquipment(ctx context.Context, in *vo.ListEquipmentRequest, opts ...grpc.CallOption) (*vo.ListEquipmentResponse, error)
	// 英雄总属性
	ListHeroEquipment(ctx context.Context, in *vo.ListHeroEquipmentRequest, opts ...grpc.CallOption) (*vo.ListHeroEquipmentResponse, error)
	// 批量获取英雄总属性
	BatchHeroEquipment(ctx context.Context, in *vo.BatchHeroEquipmentRequest, opts ...grpc.CallOption) (*vo.BatchHeroEquipmentResponse, error)
	// 分解装备
	BreakDownEquipment(ctx context.Context, in *vo.BreakDownEquipmentRequest, opts ...grpc.CallOption) (*vo.BreakDownEquipmentResponse, error)
}

type equipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentServiceClient(cc grpc.ClientConnInterface) EquipmentServiceClient {
	return &equipmentServiceClient{cc}
}

func (c *equipmentServiceClient) AddEquipment(ctx context.Context, in *vo.AddEquipmentRequest, opts ...grpc.CallOption) (*vo.AddEquipmentResponse, error) {
	out := new(vo.AddEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_AddEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) UpgradeEquipment(ctx context.Context, in *vo.UpgradeEquipmentRequest, opts ...grpc.CallOption) (*vo.UpgradeEquipmentResponse, error) {
	out := new(vo.UpgradeEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_UpgradeEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) AddFightEquipment(ctx context.Context, in *vo.AddFightEquipmentRequest, opts ...grpc.CallOption) (*vo.AddFightEquipmentResponse, error) {
	out := new(vo.AddFightEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_AddFightEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ClearFightEquipment(ctx context.Context, in *vo.ClearFightEquipmentRequest, opts ...grpc.CallOption) (*vo.ClearFightEquipmentResponse, error) {
	out := new(vo.ClearFightEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_ClearFightEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipment(ctx context.Context, in *vo.ListEquipmentRequest, opts ...grpc.CallOption) (*vo.ListEquipmentResponse, error) {
	out := new(vo.ListEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_ListEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListHeroEquipment(ctx context.Context, in *vo.ListHeroEquipmentRequest, opts ...grpc.CallOption) (*vo.ListHeroEquipmentResponse, error) {
	out := new(vo.ListHeroEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_ListHeroEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) BatchHeroEquipment(ctx context.Context, in *vo.BatchHeroEquipmentRequest, opts ...grpc.CallOption) (*vo.BatchHeroEquipmentResponse, error) {
	out := new(vo.BatchHeroEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_BatchHeroEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) BreakDownEquipment(ctx context.Context, in *vo.BreakDownEquipmentRequest, opts ...grpc.CallOption) (*vo.BreakDownEquipmentResponse, error) {
	out := new(vo.BreakDownEquipmentResponse)
	err := c.cc.Invoke(ctx, EquipmentService_BreakDownEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServiceServer is the server API for EquipmentService service.
// All implementations must embed UnimplementedEquipmentServiceServer
// for forward compatibility
type EquipmentServiceServer interface {
	// 添加装备(掉落装备)
	AddEquipment(context.Context, *vo.AddEquipmentRequest) (*vo.AddEquipmentResponse, error)
	// 强化装备
	UpgradeEquipment(context.Context, *vo.UpgradeEquipmentRequest) (*vo.UpgradeEquipmentResponse, error)
	// 穿装备
	AddFightEquipment(context.Context, *vo.AddFightEquipmentRequest) (*vo.AddFightEquipmentResponse, error)
	// 脱装备
	ClearFightEquipment(context.Context, *vo.ClearFightEquipmentRequest) (*vo.ClearFightEquipmentResponse, error)
	// 装备列表
	ListEquipment(context.Context, *vo.ListEquipmentRequest) (*vo.ListEquipmentResponse, error)
	// 英雄总属性
	ListHeroEquipment(context.Context, *vo.ListHeroEquipmentRequest) (*vo.ListHeroEquipmentResponse, error)
	// 批量获取英雄总属性
	BatchHeroEquipment(context.Context, *vo.BatchHeroEquipmentRequest) (*vo.BatchHeroEquipmentResponse, error)
	// 分解装备
	BreakDownEquipment(context.Context, *vo.BreakDownEquipmentRequest) (*vo.BreakDownEquipmentResponse, error)
	mustEmbedUnimplementedEquipmentServiceServer()
}

// UnimplementedEquipmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentServiceServer struct {
}

func (UnimplementedEquipmentServiceServer) AddEquipment(context.Context, *vo.AddEquipmentRequest) (*vo.AddEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) UpgradeEquipment(context.Context, *vo.UpgradeEquipmentRequest) (*vo.UpgradeEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) AddFightEquipment(context.Context, *vo.AddFightEquipmentRequest) (*vo.AddFightEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFightEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) ClearFightEquipment(context.Context, *vo.ClearFightEquipmentRequest) (*vo.ClearFightEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFightEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipment(context.Context, *vo.ListEquipmentRequest) (*vo.ListEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) ListHeroEquipment(context.Context, *vo.ListHeroEquipmentRequest) (*vo.ListHeroEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeroEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) BatchHeroEquipment(context.Context, *vo.BatchHeroEquipmentRequest) (*vo.BatchHeroEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchHeroEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) BreakDownEquipment(context.Context, *vo.BreakDownEquipmentRequest) (*vo.BreakDownEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreakDownEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) mustEmbedUnimplementedEquipmentServiceServer() {}

// UnsafeEquipmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServiceServer will
// result in compilation errors.
type UnsafeEquipmentServiceServer interface {
	mustEmbedUnimplementedEquipmentServiceServer()
}

func RegisterEquipmentServiceServer(s grpc.ServiceRegistrar, srv EquipmentServiceServer) {
	s.RegisterService(&EquipmentService_ServiceDesc, srv)
}

func _EquipmentService_AddEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.AddEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).AddEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_AddEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).AddEquipment(ctx, req.(*vo.AddEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_UpgradeEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.UpgradeEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).UpgradeEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_UpgradeEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).UpgradeEquipment(ctx, req.(*vo.UpgradeEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_AddFightEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.AddFightEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).AddFightEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_AddFightEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).AddFightEquipment(ctx, req.(*vo.AddFightEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ClearFightEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.ClearFightEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ClearFightEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_ClearFightEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ClearFightEquipment(ctx, req.(*vo.ClearFightEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.ListEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_ListEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipment(ctx, req.(*vo.ListEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListHeroEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.ListHeroEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListHeroEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_ListHeroEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListHeroEquipment(ctx, req.(*vo.ListHeroEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_BatchHeroEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.BatchHeroEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).BatchHeroEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_BatchHeroEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).BatchHeroEquipment(ctx, req.(*vo.BatchHeroEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_BreakDownEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.BreakDownEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).BreakDownEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_BreakDownEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).BreakDownEquipment(ctx, req.(*vo.BreakDownEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipmentService_ServiceDesc is the grpc.ServiceDesc for EquipmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.in.v1.EquipmentService",
	HandlerType: (*EquipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEquipment",
			Handler:    _EquipmentService_AddEquipment_Handler,
		},
		{
			MethodName: "UpgradeEquipment",
			Handler:    _EquipmentService_UpgradeEquipment_Handler,
		},
		{
			MethodName: "AddFightEquipment",
			Handler:    _EquipmentService_AddFightEquipment_Handler,
		},
		{
			MethodName: "ClearFightEquipment",
			Handler:    _EquipmentService_ClearFightEquipment_Handler,
		},
		{
			MethodName: "ListEquipment",
			Handler:    _EquipmentService_ListEquipment_Handler,
		},
		{
			MethodName: "ListHeroEquipment",
			Handler:    _EquipmentService_ListHeroEquipment_Handler,
		},
		{
			MethodName: "BatchHeroEquipment",
			Handler:    _EquipmentService_BatchHeroEquipment_Handler,
		},
		{
			MethodName: "BreakDownEquipment",
			Handler:    _EquipmentService_BreakDownEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/in/v1/equipment.proto",
}
