// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gamefi_equipment/internal/biz"
	"gamefi_equipment/internal/component/kafka"
	"gamefi_equipment/internal/component/redis"
	"gamefi_equipment/internal/component/redistool"
	"gamefi_equipment/internal/component/sdks"
	"gamefi_equipment/internal/conf"
	"gamefi_equipment/internal/data"
	"gamefi_equipment/internal/server"
	"gamefi_equipment/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confKafka *conf.Kafka, client *conf.Client, sys *conf.Sys, confLog *conf.Log, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, sys, confLog, logger)
	if err != nil {
		return nil, nil, err
	}
	equipmentRepo := data.NewEquipmentRepo(dataData, logger)
	equipmentUC := biz.NewEquipmentUC(equipmentRepo, logger)
	redisRedis, cleanup2, err := redis.NewRedis(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisTool := redistool.NewRedisTool(redisRedis, logger)
	kafkaKafka := kafka.NewKafka(confKafka, logger)
	sdksSdks, cleanup3, err := sdks.NewSdks(client, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	equipmentService := service.NewEquipmentService(equipmentUC, redisTool, kafkaKafka, sdksSdks, logger)
	grpcServer := server.NewGRPCServer(confServer, equipmentService, logger)
	httpServer := server.NewHTTPServer(confServer, equipmentService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
