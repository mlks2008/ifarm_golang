// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: sdks/gamefi_platform/pb/gamefi_platform.proto

package pb

import (
	vo "components/sdks/gamefi_platform/pb/vo"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlatformDust_AddAsset_FullMethodName    = "/components.sdks.gamefi_platform.pb.PlatformDust/AddAsset"
	PlatformDust_FreezeAsset_FullMethodName = "/components.sdks.gamefi_platform.pb.PlatformDust/FreezeAsset"
	PlatformDust_SubAsset_FullMethodName    = "/components.sdks.gamefi_platform.pb.PlatformDust/SubAsset"
	PlatformDust_ReturnAsset_FullMethodName = "/components.sdks.gamefi_platform.pb.PlatformDust/ReturnAsset"
	PlatformDust_AddHero_FullMethodName     = "/components.sdks.gamefi_platform.pb.PlatformDust/AddHero"
	PlatformDust_FreezeHero_FullMethodName  = "/components.sdks.gamefi_platform.pb.PlatformDust/FreezeHero"
	PlatformDust_SubHero_FullMethodName     = "/components.sdks.gamefi_platform.pb.PlatformDust/SubHero"
	PlatformDust_ReturnHero_FullMethodName  = "/components.sdks.gamefi_platform.pb.PlatformDust/ReturnHero"
	PlatformDust_GetUserHero_FullMethodName = "/components.sdks.gamefi_platform.pb.PlatformDust/GetUserHero"
)

// PlatformDustClient is the client API for PlatformDust service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformDustClient interface {
	// 增加资产
	AddAsset(ctx context.Context, in *vo.DustAddAssetRequest, opts ...grpc.CallOption) (*vo.DustAddAssetResponse, error)
	// 冻结资产
	FreezeAsset(ctx context.Context, in *vo.DustFreezeAssetRequest, opts ...grpc.CallOption) (*vo.DustFreezeAssetResponse, error)
	// 扣除资产
	SubAsset(ctx context.Context, in *vo.DustSubAssetRequest, opts ...grpc.CallOption) (*vo.DustSubAssetResponse, error)
	// 解冻资产
	ReturnAsset(ctx context.Context, in *vo.DustReturnAssetRequest, opts ...grpc.CallOption) (*vo.DustReturnAssetResponse, error)
	// 增加Hero
	AddHero(ctx context.Context, in *vo.AddHeroRequest, opts ...grpc.CallOption) (*vo.AddHeroResponse, error)
	// 冻结Hero
	FreezeHero(ctx context.Context, in *vo.FreezeHeroRequest, opts ...grpc.CallOption) (*vo.FreezeHeroResponse, error)
	// 扣除Hero
	SubHero(ctx context.Context, in *vo.SubHeroRequest, opts ...grpc.CallOption) (*vo.SubHeroResponse, error)
	// 解冻Hero
	ReturnHero(ctx context.Context, in *vo.ReturnHeroRequest, opts ...grpc.CallOption) (*vo.ReturnHeroResponse, error)
	// 查询用户Hero
	GetUserHero(ctx context.Context, in *vo.GetUserHeroRequest, opts ...grpc.CallOption) (*vo.GetUserHeroResponse, error)
}

type platformDustClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformDustClient(cc grpc.ClientConnInterface) PlatformDustClient {
	return &platformDustClient{cc}
}

func (c *platformDustClient) AddAsset(ctx context.Context, in *vo.DustAddAssetRequest, opts ...grpc.CallOption) (*vo.DustAddAssetResponse, error) {
	out := new(vo.DustAddAssetResponse)
	err := c.cc.Invoke(ctx, PlatformDust_AddAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) FreezeAsset(ctx context.Context, in *vo.DustFreezeAssetRequest, opts ...grpc.CallOption) (*vo.DustFreezeAssetResponse, error) {
	out := new(vo.DustFreezeAssetResponse)
	err := c.cc.Invoke(ctx, PlatformDust_FreezeAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) SubAsset(ctx context.Context, in *vo.DustSubAssetRequest, opts ...grpc.CallOption) (*vo.DustSubAssetResponse, error) {
	out := new(vo.DustSubAssetResponse)
	err := c.cc.Invoke(ctx, PlatformDust_SubAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) ReturnAsset(ctx context.Context, in *vo.DustReturnAssetRequest, opts ...grpc.CallOption) (*vo.DustReturnAssetResponse, error) {
	out := new(vo.DustReturnAssetResponse)
	err := c.cc.Invoke(ctx, PlatformDust_ReturnAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) AddHero(ctx context.Context, in *vo.AddHeroRequest, opts ...grpc.CallOption) (*vo.AddHeroResponse, error) {
	out := new(vo.AddHeroResponse)
	err := c.cc.Invoke(ctx, PlatformDust_AddHero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) FreezeHero(ctx context.Context, in *vo.FreezeHeroRequest, opts ...grpc.CallOption) (*vo.FreezeHeroResponse, error) {
	out := new(vo.FreezeHeroResponse)
	err := c.cc.Invoke(ctx, PlatformDust_FreezeHero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) SubHero(ctx context.Context, in *vo.SubHeroRequest, opts ...grpc.CallOption) (*vo.SubHeroResponse, error) {
	out := new(vo.SubHeroResponse)
	err := c.cc.Invoke(ctx, PlatformDust_SubHero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) ReturnHero(ctx context.Context, in *vo.ReturnHeroRequest, opts ...grpc.CallOption) (*vo.ReturnHeroResponse, error) {
	out := new(vo.ReturnHeroResponse)
	err := c.cc.Invoke(ctx, PlatformDust_ReturnHero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformDustClient) GetUserHero(ctx context.Context, in *vo.GetUserHeroRequest, opts ...grpc.CallOption) (*vo.GetUserHeroResponse, error) {
	out := new(vo.GetUserHeroResponse)
	err := c.cc.Invoke(ctx, PlatformDust_GetUserHero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformDustServer is the server API for PlatformDust service.
// All implementations must embed UnimplementedPlatformDustServer
// for forward compatibility
type PlatformDustServer interface {
	// 增加资产
	AddAsset(context.Context, *vo.DustAddAssetRequest) (*vo.DustAddAssetResponse, error)
	// 冻结资产
	FreezeAsset(context.Context, *vo.DustFreezeAssetRequest) (*vo.DustFreezeAssetResponse, error)
	// 扣除资产
	SubAsset(context.Context, *vo.DustSubAssetRequest) (*vo.DustSubAssetResponse, error)
	// 解冻资产
	ReturnAsset(context.Context, *vo.DustReturnAssetRequest) (*vo.DustReturnAssetResponse, error)
	// 增加Hero
	AddHero(context.Context, *vo.AddHeroRequest) (*vo.AddHeroResponse, error)
	// 冻结Hero
	FreezeHero(context.Context, *vo.FreezeHeroRequest) (*vo.FreezeHeroResponse, error)
	// 扣除Hero
	SubHero(context.Context, *vo.SubHeroRequest) (*vo.SubHeroResponse, error)
	// 解冻Hero
	ReturnHero(context.Context, *vo.ReturnHeroRequest) (*vo.ReturnHeroResponse, error)
	// 查询用户Hero
	GetUserHero(context.Context, *vo.GetUserHeroRequest) (*vo.GetUserHeroResponse, error)
	mustEmbedUnimplementedPlatformDustServer()
}

// UnimplementedPlatformDustServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformDustServer struct {
}

func (UnimplementedPlatformDustServer) AddAsset(context.Context, *vo.DustAddAssetRequest) (*vo.DustAddAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedPlatformDustServer) FreezeAsset(context.Context, *vo.DustFreezeAssetRequest) (*vo.DustFreezeAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeAsset not implemented")
}
func (UnimplementedPlatformDustServer) SubAsset(context.Context, *vo.DustSubAssetRequest) (*vo.DustSubAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubAsset not implemented")
}
func (UnimplementedPlatformDustServer) ReturnAsset(context.Context, *vo.DustReturnAssetRequest) (*vo.DustReturnAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnAsset not implemented")
}
func (UnimplementedPlatformDustServer) AddHero(context.Context, *vo.AddHeroRequest) (*vo.AddHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHero not implemented")
}
func (UnimplementedPlatformDustServer) FreezeHero(context.Context, *vo.FreezeHeroRequest) (*vo.FreezeHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeHero not implemented")
}
func (UnimplementedPlatformDustServer) SubHero(context.Context, *vo.SubHeroRequest) (*vo.SubHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubHero not implemented")
}
func (UnimplementedPlatformDustServer) ReturnHero(context.Context, *vo.ReturnHeroRequest) (*vo.ReturnHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnHero not implemented")
}
func (UnimplementedPlatformDustServer) GetUserHero(context.Context, *vo.GetUserHeroRequest) (*vo.GetUserHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHero not implemented")
}
func (UnimplementedPlatformDustServer) mustEmbedUnimplementedPlatformDustServer() {}

// UnsafePlatformDustServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformDustServer will
// result in compilation errors.
type UnsafePlatformDustServer interface {
	mustEmbedUnimplementedPlatformDustServer()
}

func RegisterPlatformDustServer(s grpc.ServiceRegistrar, srv PlatformDustServer) {
	s.RegisterService(&PlatformDust_ServiceDesc, srv)
}

func _PlatformDust_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.DustAddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_AddAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).AddAsset(ctx, req.(*vo.DustAddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_FreezeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.DustFreezeAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).FreezeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_FreezeAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).FreezeAsset(ctx, req.(*vo.DustFreezeAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_SubAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.DustSubAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).SubAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_SubAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).SubAsset(ctx, req.(*vo.DustSubAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_ReturnAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.DustReturnAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).ReturnAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_ReturnAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).ReturnAsset(ctx, req.(*vo.DustReturnAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_AddHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.AddHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).AddHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_AddHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).AddHero(ctx, req.(*vo.AddHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_FreezeHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.FreezeHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).FreezeHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_FreezeHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).FreezeHero(ctx, req.(*vo.FreezeHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_SubHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.SubHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).SubHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_SubHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).SubHero(ctx, req.(*vo.SubHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_ReturnHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.ReturnHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).ReturnHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_ReturnHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).ReturnHero(ctx, req.(*vo.ReturnHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformDust_GetUserHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.GetUserHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformDustServer).GetUserHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformDust_GetUserHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformDustServer).GetUserHero(ctx, req.(*vo.GetUserHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformDust_ServiceDesc is the grpc.ServiceDesc for PlatformDust service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformDust_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "components.sdks.gamefi_platform.pb.PlatformDust",
	HandlerType: (*PlatformDustServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAsset",
			Handler:    _PlatformDust_AddAsset_Handler,
		},
		{
			MethodName: "FreezeAsset",
			Handler:    _PlatformDust_FreezeAsset_Handler,
		},
		{
			MethodName: "SubAsset",
			Handler:    _PlatformDust_SubAsset_Handler,
		},
		{
			MethodName: "ReturnAsset",
			Handler:    _PlatformDust_ReturnAsset_Handler,
		},
		{
			MethodName: "AddHero",
			Handler:    _PlatformDust_AddHero_Handler,
		},
		{
			MethodName: "FreezeHero",
			Handler:    _PlatformDust_FreezeHero_Handler,
		},
		{
			MethodName: "SubHero",
			Handler:    _PlatformDust_SubHero_Handler,
		},
		{
			MethodName: "ReturnHero",
			Handler:    _PlatformDust_ReturnHero_Handler,
		},
		{
			MethodName: "GetUserHero",
			Handler:    _PlatformDust_GetUserHero_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdks/gamefi_platform/pb/gamefi_platform.proto",
}
