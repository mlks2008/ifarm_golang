// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.0
// source: sdks/gts_shop/pb/gts_shop.proto

package pb

import (
	vo "components/sdks/gts_shop/pb/vo"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGtsShopAddAsset = "/components.sdks.gts_shop.pb.GtsShop/AddAsset"
const OperationGtsShopAuthCode = "/components.sdks.gts_shop.pb.GtsShop/AuthCode"
const OperationGtsShopFreezeAsset = "/components.sdks.gts_shop.pb.GtsShop/FreezeAsset"
const OperationGtsShopListAsset = "/components.sdks.gts_shop.pb.GtsShop/ListAsset"
const OperationGtsShopReturnAsset = "/components.sdks.gts_shop.pb.GtsShop/ReturnAsset"
const OperationGtsShopSendVerificationCode = "/components.sdks.gts_shop.pb.GtsShop/SendVerificationCode"
const OperationGtsShopSubAsset = "/components.sdks.gts_shop.pb.GtsShop/SubAsset"
const OperationGtsShopUserProfile = "/components.sdks.gts_shop.pb.GtsShop/UserProfile"
const OperationGtsShopVerifyCode = "/components.sdks.gts_shop.pb.GtsShop/VerifyCode"

type GtsShopHTTPServer interface {
	// AddAsset 增加资产
	AddAsset(context.Context, *vo.AddAssetRequest) (*vo.AddAssetResponse, error)
	// AuthCode 鉴权登录
	AuthCode(context.Context, *vo.AuthorizationCodeRequest) (*vo.GetAccountResponse, error)
	// FreezeAsset 冻结资产
	FreezeAsset(context.Context, *vo.FreezeAssetRequest) (*vo.FreezeAssetResponse, error)
	// ListAsset 账户列表
	ListAsset(context.Context, *vo.ListAssetRequest) (*vo.ListAssetResponse, error)
	// ReturnAsset 解冻资产
	ReturnAsset(context.Context, *vo.ReturnAssetRequest) (*vo.ReturnAssetResponse, error)
	// SendVerificationCode 发送验证码
	SendVerificationCode(context.Context, *vo.SendVerificationCodeRequest) (*vo.SendVerificationCodeResponse, error)
	// SubAsset 扣除资产
	SubAsset(context.Context, *vo.SubAssetRequest) (*vo.SubAssetResponse, error)
	// UserProfile 获取用户信息
	UserProfile(context.Context, *vo.UserProfileRequest) (*vo.GetAccountResponse, error)
	// VerifyCode 验证验证码
	VerifyCode(context.Context, *vo.VerifyCodeRequest) (*vo.VerifyCodeResponse, error)
}

func RegisterGtsShopHTTPServer(s *http.Server, srv GtsShopHTTPServer) {
	r := s.Route("/")
	r.POST("/backend/token_user/token_user_info", _GtsShop_AuthCode0_HTTP_Handler(srv))
	r.POST("/backend/token_user/{userId}/send_verification_message", _GtsShop_SendVerificationCode0_HTTP_Handler(srv))
	r.POST("/backend/token_user/check_qr_code", _GtsShop_VerifyCode0_HTTP_Handler(srv))
	r.GET("/backend/token_user/token_user_info/{tokenUserId}", _GtsShop_UserProfile0_HTTP_Handler(srv))
	r.GET("/backend/user_gp/wallet/query/{realUserId}", _GtsShop_ListAsset0_HTTP_Handler(srv))
	r.POST("/backend/user_gp/increase", _GtsShop_AddAsset0_HTTP_Handler(srv))
	r.POST("/backend/user_gp/holding", _GtsShop_FreezeAsset0_HTTP_Handler(srv))
	r.POST("/backend/user_gp/confirm_holding", _GtsShop_SubAsset0_HTTP_Handler(srv))
	r.POST("/backend/user_gp/return_holding", _GtsShop_ReturnAsset0_HTTP_Handler(srv))
}

func _GtsShop_AuthCode0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.AuthorizationCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopAuthCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthCode(ctx, req.(*vo.AuthorizationCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.GetAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_SendVerificationCode0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.SendVerificationCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopSendVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendVerificationCode(ctx, req.(*vo.SendVerificationCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.SendVerificationCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_VerifyCode0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.VerifyCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopVerifyCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyCode(ctx, req.(*vo.VerifyCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.VerifyCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_UserProfile0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.UserProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserProfile(ctx, req.(*vo.UserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.GetAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_ListAsset0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.ListAssetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopListAsset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAsset(ctx, req.(*vo.ListAssetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.ListAssetResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_AddAsset0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.AddAssetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopAddAsset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAsset(ctx, req.(*vo.AddAssetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.AddAssetResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_FreezeAsset0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.FreezeAssetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopFreezeAsset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FreezeAsset(ctx, req.(*vo.FreezeAssetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.FreezeAssetResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_SubAsset0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.SubAssetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopSubAsset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubAsset(ctx, req.(*vo.SubAssetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.SubAssetResponse)
		return ctx.Result(200, reply)
	}
}

func _GtsShop_ReturnAsset0_HTTP_Handler(srv GtsShopHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.ReturnAssetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGtsShopReturnAsset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReturnAsset(ctx, req.(*vo.ReturnAssetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.ReturnAssetResponse)
		return ctx.Result(200, reply)
	}
}

type GtsShopHTTPClient interface {
	AddAsset(ctx context.Context, req *vo.AddAssetRequest, opts ...http.CallOption) (rsp *vo.AddAssetResponse, err error)
	AuthCode(ctx context.Context, req *vo.AuthorizationCodeRequest, opts ...http.CallOption) (rsp *vo.GetAccountResponse, err error)
	FreezeAsset(ctx context.Context, req *vo.FreezeAssetRequest, opts ...http.CallOption) (rsp *vo.FreezeAssetResponse, err error)
	ListAsset(ctx context.Context, req *vo.ListAssetRequest, opts ...http.CallOption) (rsp *vo.ListAssetResponse, err error)
	ReturnAsset(ctx context.Context, req *vo.ReturnAssetRequest, opts ...http.CallOption) (rsp *vo.ReturnAssetResponse, err error)
	SendVerificationCode(ctx context.Context, req *vo.SendVerificationCodeRequest, opts ...http.CallOption) (rsp *vo.SendVerificationCodeResponse, err error)
	SubAsset(ctx context.Context, req *vo.SubAssetRequest, opts ...http.CallOption) (rsp *vo.SubAssetResponse, err error)
	UserProfile(ctx context.Context, req *vo.UserProfileRequest, opts ...http.CallOption) (rsp *vo.GetAccountResponse, err error)
	VerifyCode(ctx context.Context, req *vo.VerifyCodeRequest, opts ...http.CallOption) (rsp *vo.VerifyCodeResponse, err error)
}

type GtsShopHTTPClientImpl struct {
	cc *http.Client
}

func NewGtsShopHTTPClient(client *http.Client) GtsShopHTTPClient {
	return &GtsShopHTTPClientImpl{client}
}

func (c *GtsShopHTTPClientImpl) AddAsset(ctx context.Context, in *vo.AddAssetRequest, opts ...http.CallOption) (*vo.AddAssetResponse, error) {
	var out vo.AddAssetResponse
	pattern := "/backend/user_gp/increase"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopAddAsset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) AuthCode(ctx context.Context, in *vo.AuthorizationCodeRequest, opts ...http.CallOption) (*vo.GetAccountResponse, error) {
	var out vo.GetAccountResponse
	pattern := "/backend/token_user/token_user_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopAuthCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) FreezeAsset(ctx context.Context, in *vo.FreezeAssetRequest, opts ...http.CallOption) (*vo.FreezeAssetResponse, error) {
	var out vo.FreezeAssetResponse
	pattern := "/backend/user_gp/holding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopFreezeAsset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) ListAsset(ctx context.Context, in *vo.ListAssetRequest, opts ...http.CallOption) (*vo.ListAssetResponse, error) {
	var out vo.ListAssetResponse
	pattern := "/backend/user_gp/wallet/query/{realUserId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGtsShopListAsset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) ReturnAsset(ctx context.Context, in *vo.ReturnAssetRequest, opts ...http.CallOption) (*vo.ReturnAssetResponse, error) {
	var out vo.ReturnAssetResponse
	pattern := "/backend/user_gp/return_holding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopReturnAsset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) SendVerificationCode(ctx context.Context, in *vo.SendVerificationCodeRequest, opts ...http.CallOption) (*vo.SendVerificationCodeResponse, error) {
	var out vo.SendVerificationCodeResponse
	pattern := "/backend/token_user/{userId}/send_verification_message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopSendVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) SubAsset(ctx context.Context, in *vo.SubAssetRequest, opts ...http.CallOption) (*vo.SubAssetResponse, error) {
	var out vo.SubAssetResponse
	pattern := "/backend/user_gp/confirm_holding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopSubAsset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) UserProfile(ctx context.Context, in *vo.UserProfileRequest, opts ...http.CallOption) (*vo.GetAccountResponse, error) {
	var out vo.GetAccountResponse
	pattern := "/backend/token_user/token_user_info/{tokenUserId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGtsShopUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GtsShopHTTPClientImpl) VerifyCode(ctx context.Context, in *vo.VerifyCodeRequest, opts ...http.CallOption) (*vo.VerifyCodeResponse, error) {
	var out vo.VerifyCodeResponse
	pattern := "/backend/token_user/check_qr_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGtsShopVerifyCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
