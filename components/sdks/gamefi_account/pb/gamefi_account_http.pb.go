// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.0
// source: sdks/gamefi_account/pb/gamefi_account.proto

package pb

import (
	vo "components/sdks/gamefi_account/pb/vo"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGamefiAccountSendEmail = "/components.sdks.gamefi_account.pb.GamefiAccount/SendEmail"

type GamefiAccountHTTPServer interface {
	// SendEmail 发送邮件
	SendEmail(context.Context, *vo.SendEmailRequest) (*vo.SendEmailResponse, error)
}

func RegisterGamefiAccountHTTPServer(s *http.Server, srv GamefiAccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account/common/email/send", _GamefiAccount_SendEmail0_HTTP_Handler(srv))
}

func _GamefiAccount_SendEmail0_HTTP_Handler(srv GamefiAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in vo.SendEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGamefiAccountSendEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmail(ctx, req.(*vo.SendEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*vo.SendEmailResponse)
		return ctx.Result(200, reply)
	}
}

type GamefiAccountHTTPClient interface {
	SendEmail(ctx context.Context, req *vo.SendEmailRequest, opts ...http.CallOption) (rsp *vo.SendEmailResponse, err error)
}

type GamefiAccountHTTPClientImpl struct {
	cc *http.Client
}

func NewGamefiAccountHTTPClient(client *http.Client) GamefiAccountHTTPClient {
	return &GamefiAccountHTTPClientImpl{client}
}

func (c *GamefiAccountHTTPClientImpl) SendEmail(ctx context.Context, in *vo.SendEmailRequest, opts ...http.CallOption) (*vo.SendEmailResponse, error) {
	var out vo.SendEmailResponse
	pattern := "/account/common/email/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGamefiAccountSendEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
