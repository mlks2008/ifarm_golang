// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: sdks/gtsportal/pb/gtsportal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GtsPortal_GetToken_FullMethodName = "/sdks.gtsportal.pb.GtsPortal/GetToken"
)

// GtsPortalClient is the client API for GtsPortal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GtsPortalClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error)
}

type gtsPortalClient struct {
	cc grpc.ClientConnInterface
}

func NewGtsPortalClient(cc grpc.ClientConnInterface) GtsPortalClient {
	return &gtsPortalClient{cc}
}

func (c *gtsPortalClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := c.cc.Invoke(ctx, GtsPortal_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GtsPortalServer is the server API for GtsPortal service.
// All implementations must embed UnimplementedGtsPortalServer
// for forward compatibility
type GtsPortalServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error)
	mustEmbedUnimplementedGtsPortalServer()
}

// UnimplementedGtsPortalServer must be embedded to have forward compatible implementations.
type UnimplementedGtsPortalServer struct {
}

func (UnimplementedGtsPortalServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedGtsPortalServer) mustEmbedUnimplementedGtsPortalServer() {}

// UnsafeGtsPortalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GtsPortalServer will
// result in compilation errors.
type UnsafeGtsPortalServer interface {
	mustEmbedUnimplementedGtsPortalServer()
}

func RegisterGtsPortalServer(s grpc.ServiceRegistrar, srv GtsPortalServer) {
	s.RegisterService(&GtsPortal_ServiceDesc, srv)
}

func _GtsPortal_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtsPortalServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GtsPortal_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtsPortalServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GtsPortal_ServiceDesc is the grpc.ServiceDesc for GtsPortal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GtsPortal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdks.gtsportal.pb.GtsPortal",
	HandlerType: (*GtsPortalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _GtsPortal_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdks/gtsportal/pb/gtsportal.proto",
}
